export EDEN_EXEC='eden --client user --client-secret pass --url http://127.0.0.1:8080'
export SERVICE_NAME='solr-cloud'
export PLAN_NAME='base'

# Use the env var INSTANCE_NAME for the name of the instance to be created, or
# "instance-$USER" if it was not specified. 
#
# We do this to minimize the chance of people stomping on each other when
# provisioning resources into a shared account, and to make it easy to recognize
# who resources belong to.
#
# We can also use a job ID during CI to avoid collisions from parallel
# invocations, and make it obvious which resources correspond to which CI run.
export TEMP_NAME="instance-${USER}"
export INSTANCE_NAME=${INSTANCE_NAME:-$TEMP_NAME}

./generate-examples.sh > examples.json
jq '.[0].provision_params.replicas=2' examples.json > examples.json1 && mv examples.json1 examples.json
export CLOUD_PROVISION_PARAMS=$(cat examples.json |jq '.[] | select(.service_name | contains("solr-cloud")) | .provision_params')
export CLOUD_BIND_PARAMS=$(cat examples.json |jq '.[] | select(.service_name | contains("solr-cloud")) | .bind_params')

gen_creds () {
  # $1 -- The ID of provision A instance
  # $2 -- The ID of the binding credentials
  # $3 -- The ID of provision B instance
  # If $1 is different from $3, the idea is to check that credentials from
  # one provision don't work on a different provision, i.e.
  #   Get the CREDENTIALS from provision A
  #   Get the URI from provision B
  export PROVISION_DOMAIN=$($EDEN_EXEC credentials -i "${INSTANCE_NAME}""-$3" | jq -r .domain)
  export PROVISION_URI=$($EDEN_EXEC credentials -i "${INSTANCE_NAME}""-$3" -b "solr-cloud-""$2" | jq -r .uri)
  export PROVISION_USER=$($EDEN_EXEC credentials -i "${INSTANCE_NAME}""-$1" -b "solr-cloud-""$2" | jq -r .username)
  export PROVISION_PASS=$($EDEN_EXEC credentials -i "${INSTANCE_NAME}""-$1" -b "solr-cloud-""$2" | jq -r .password)
}

export get_binding=gen_creds
